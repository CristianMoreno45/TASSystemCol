// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnalColombia.Logistic.TAS.Infrastructure.Persistence;

#nullable disable

namespace UnalColombia.Logistic.TAS.Infrastructure.Migrations
{
    [DbContext(typeof(TASDbContext))]
    partial class TASDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentStateId")
                        .HasColumnType("int");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentStateId");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DriverId");

                    b.HasIndex("FinishTime");

                    b.HasIndex("LastUpdatedUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StartTime");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.AppointmentState", b =>
                {
                    b.Property<int>("AppointmentStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentStateId"));

                    b.Property<bool>("AllowChanges")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentStateId");

                    b.HasIndex("TerminalId");

                    b.ToTable("AppointmentStates");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Calendar", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("time");

                    b.Property<bool>("HasOverlaping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int");

                    b.HasKey("CalendarId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.CargoInformation", b =>
                {
                    b.Property<Guid>("CargoInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GeographicalLocationDestinationISOCountryId")
                        .HasColumnType("int");

                    b.Property<int>("GeographicalLocationOriginISOCountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossWeightInKilos")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("HeightInFeet")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("IMOCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoaded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOversizedLoad")
                        .HasColumnType("bit");

                    b.Property<decimal>("LengthInFeet")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("NetWeightInKilos")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("RequiredCelciusTemperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TractorTrailerRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeCargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TypeContainerId")
                        .HasColumnType("int");

                    b.Property<decimal>("WidthInFeet")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("CargoInformationId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("GeographicalLocationDestinationISOCountryId");

                    b.HasIndex("GeographicalLocationOriginISOCountryId");

                    b.HasIndex("TypeContainerId");

                    b.ToTable("CargoInformation");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RankingNumber")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Code3")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.DayOfWeekSettings", b =>
                {
                    b.Property<int>("SettingDayOfWeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingDayOfWeekId"));

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("SettingDayOfWeekId");

                    b.HasIndex("CalendarId");

                    b.ToTable("DayOfWeekSettings");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.DeadBand", b =>
                {
                    b.Property<int>("DeadBandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeadBandId"));

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RecurrentPattern")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("DeadBandId");

                    b.HasIndex("CalendarId");

                    b.ToTable("DeadBands");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Driver", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DriverId");

                    b.HasIndex("IdentificationTypeId");

                    b.HasIndex("LicenceNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.HistoryAppointment", b =>
                {
                    b.Property<long>("HistoryAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HistoryAppointmentId"));

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentStateId")
                        .HasColumnType("int");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("FinishTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HistoryAppointmentId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("AppointmentStateId");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LastUpdatedUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProviderId");

                    b.ToTable("HistoryAppointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.HistoryPoint", b =>
                {
                    b.Property<Guid>("PointHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("SuperPowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PointHistoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastUpdatedUserId");

                    b.HasIndex("UserId", "SuperPowerId");

                    b.HasIndex("UserId", "WalletId");

                    b.ToTable("HistoryPoints");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.ISOCountry", b =>
                {
                    b.Property<int>("ISOCountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ISOCountryId"));

                    b.Property<string>("A2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("A3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ISOCountryId");

                    b.ToTable("ISOCountries");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.IdentificationType", b =>
                {
                    b.Property<int>("IdentificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentificationTypeId"));

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Code3")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdentificationTypeId");

                    b.ToTable("IdentificationTypes");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("FisicalLocation")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MissionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("MissionId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastUpdatedUserId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.MissionAppointmet", b =>
                {
                    b.Property<int>("MissionId")
                        .HasColumnType("int");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MissionId", "AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("MissionAppointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Operator", b =>
                {
                    b.Property<long>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OperatorId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("OperatorId");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Provider", b =>
                {
                    b.Property<Guid>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FiscalAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FiscalNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProviderId");

                    b.HasIndex("FiscalNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("Code1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Code2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Code3")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.SuperPower", b =>
                {
                    b.Property<Guid>("SuperPowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserIdUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinutesDuaration")
                        .HasColumnType("int");

                    b.Property<decimal>("MultiplierFactor")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UpdatedByUserIdUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuperPowerId");

                    b.HasIndex("CreatedByUserIdUserId");

                    b.HasIndex("UpdatedByUserIdUserId");

                    b.ToTable("SuperPowers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.SuperPowerUser", b =>
                {
                    b.Property<Guid>("SuperPowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuperPowerId", "UserId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastUpdatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SuperPowerUsers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Terminal", b =>
                {
                    b.Property<int>("TerminalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerminalId"));

                    b.Property<int>("GeographicLocationCityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("OperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TerminalId");

                    b.HasIndex("GeographicLocationCityId");

                    b.HasIndex("OperatorId");

                    b.ToTable("Terminals");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.TerminalOperator", b =>
                {
                    b.Property<Guid>("TerminalOperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TerminalOperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("TerminalOperators");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.TypeContainer", b =>
                {
                    b.Property<int>("TypeContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeContainerId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("TypeContainerId");

                    b.ToTable("TypeContainers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TerminalId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TerminalId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.WalletUser", b =>
                {
                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WalletId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WalletUsers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.AppointmentState", "AppointmentState")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Calendar", "Calendar")
                        .WithMany("Appointments")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedAppointments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Driver", "Driver")
                        .WithMany("Appointments")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedAppointments")
                        .HasForeignKey("LastUpdatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Location", "Location")
                        .WithMany("Appointments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Provider", "Provider")
                        .WithMany("Appointments")
                        .HasForeignKey("ProviderId");

                    b.Navigation("AppointmentState");

                    b.Navigation("Calendar");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Driver");

                    b.Navigation("Location");

                    b.Navigation("Provider");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.AppointmentState", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Terminal", "Terminal")
                        .WithMany("AppointmentStates")
                        .HasForeignKey("TerminalId");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Calendar", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Terminal", "Terminal")
                        .WithMany("Calendars")
                        .HasForeignKey("TerminalId");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.CargoInformation", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Appointment", "Appointment")
                        .WithMany("CargoInformation")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.ISOCountry", "GeographicalLocationDestination")
                        .WithMany("DestinationCargoInformationList")
                        .HasForeignKey("GeographicalLocationDestinationISOCountryId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.ISOCountry", "GeographicalLocationOrigin")
                        .WithMany("OriginCargoInformationList")
                        .HasForeignKey("GeographicalLocationOriginISOCountryId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.TypeContainer", "TypeContainer")
                        .WithMany("CargoInformation")
                        .HasForeignKey("TypeContainerId");

                    b.Navigation("Appointment");

                    b.Navigation("GeographicalLocationDestination");

                    b.Navigation("GeographicalLocationOrigin");

                    b.Navigation("TypeContainer");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.City", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.DayOfWeekSettings", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Calendar", "Calendar")
                        .WithMany("DayOfWeekSettings")
                        .HasForeignKey("CalendarId");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.DeadBand", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Calendar", "Calendar")
                        .WithMany("DeadBands")
                        .HasForeignKey("CalendarId");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Driver", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.IdentificationType", "IdentificationType")
                        .WithMany("Drivers")
                        .HasForeignKey("IdentificationTypeId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId");

                    b.Navigation("IdentificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.HistoryAppointment", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Appointment", "Appointment")
                        .WithMany("HistoryAppointments")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.AppointmentState", "AppointmentState")
                        .WithMany("HistoryAppointments")
                        .HasForeignKey("AppointmentStateId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Calendar", "Calendar")
                        .WithMany("HistoryAppointments")
                        .HasForeignKey("CalendarId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedHistoryAppointments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Driver", "Driver")
                        .WithMany("HistoryAppointments")
                        .HasForeignKey("DriverId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedHistoryAppointments")
                        .HasForeignKey("LastUpdatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Location", "Location")
                        .WithMany("HistoryAppointments")
                        .HasForeignKey("LocationId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Provider", "Provider")
                        .WithMany("HistoryAppointments")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Appointment");

                    b.Navigation("AppointmentState");

                    b.Navigation("Calendar");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Driver");

                    b.Navigation("Location");

                    b.Navigation("Provider");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.HistoryPoint", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedHistoryPoints")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedHistoryPoints")
                        .HasForeignKey("LastUpdatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "User")
                        .WithMany("HistoryPoints")
                        .HasForeignKey("UserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.SuperPowerUser", "SuperPowerByUser")
                        .WithMany("HistoryAppliedPoints")
                        .HasForeignKey("UserId", "SuperPowerId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.WalletUser", "WalledUser")
                        .WithMany("HistoryPoints")
                        .HasForeignKey("UserId", "WalletId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("SuperPowerByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");

                    b.Navigation("WalledUser");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Location", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Terminal", "Terminal")
                        .WithMany("Locations")
                        .HasForeignKey("TerminalId");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Mission", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedMissions")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedMissions")
                        .HasForeignKey("LastUpdatedUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.MissionAppointmet", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Appointment", "Appointment")
                        .WithMany("MissionAppointmets")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Mission", "Mission")
                        .WithMany("MissionAppointmets")
                        .HasForeignKey("MissionId");

                    b.Navigation("Appointment");

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Provider", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "User")
                        .WithMany("Providers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.SuperPower", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "CreatedByUserId")
                        .WithMany()
                        .HasForeignKey("CreatedByUserIdUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "UpdatedByUserId")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserIdUserId");

                    b.Navigation("CreatedByUserId");

                    b.Navigation("UpdatedByUserId");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.SuperPowerUser", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedSuperPowerByUserList")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedSuperPowerByUserList")
                        .HasForeignKey("LastUpdatedUserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "User")
                        .WithMany("SuperPowers")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Terminal", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.City", "City")
                        .WithMany("Terminals")
                        .HasForeignKey("GeographicLocationCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Operator", "Operator")
                        .WithMany("Terminals")
                        .HasForeignKey("OperatorId");

                    b.Navigation("City");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.TerminalOperator", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "User")
                        .WithMany("TerminalOperators")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.User", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Terminal", "Terminal")
                        .WithMany("Users")
                        .HasForeignKey("TerminalId");

                    b.Navigation("Category");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.WalletUser", b =>
                {
                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.User", "User")
                        .WithMany("WalledByUsers")
                        .HasForeignKey("UserId");

                    b.HasOne("UnalColombia.Logistic.TAS.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalledByUsers")
                        .HasForeignKey("WalletId");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("CargoInformation");

                    b.Navigation("HistoryAppointments");

                    b.Navigation("MissionAppointmets");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.AppointmentState", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HistoryAppointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Calendar", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DayOfWeekSettings");

                    b.Navigation("DeadBands");

                    b.Navigation("HistoryAppointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.City", b =>
                {
                    b.Navigation("Terminals");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Driver", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HistoryAppointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.ISOCountry", b =>
                {
                    b.Navigation("DestinationCargoInformationList");

                    b.Navigation("OriginCargoInformationList");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.IdentificationType", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Location", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HistoryAppointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Mission", b =>
                {
                    b.Navigation("MissionAppointmets");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Operator", b =>
                {
                    b.Navigation("Terminals");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Provider", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HistoryAppointments");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.SuperPowerUser", b =>
                {
                    b.Navigation("HistoryAppliedPoints");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Terminal", b =>
                {
                    b.Navigation("AppointmentStates");

                    b.Navigation("Calendars");

                    b.Navigation("Locations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.TypeContainer", b =>
                {
                    b.Navigation("CargoInformation");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedAppointments");

                    b.Navigation("CreatedHistoryAppointments");

                    b.Navigation("CreatedHistoryPoints");

                    b.Navigation("CreatedMissions");

                    b.Navigation("CreatedSuperPowerByUserList");

                    b.Navigation("Drivers");

                    b.Navigation("HistoryPoints");

                    b.Navigation("Providers");

                    b.Navigation("SuperPowers");

                    b.Navigation("TerminalOperators");

                    b.Navigation("UpdatedAppointments");

                    b.Navigation("UpdatedHistoryAppointments");

                    b.Navigation("UpdatedHistoryPoints");

                    b.Navigation("UpdatedMissions");

                    b.Navigation("UpdatedSuperPowerByUserList");

                    b.Navigation("WalledByUsers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("WalledByUsers");
                });

            modelBuilder.Entity("UnalColombia.Logistic.TAS.Domain.Entities.WalletUser", b =>
                {
                    b.Navigation("HistoryPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
